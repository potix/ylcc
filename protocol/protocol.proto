syntax = "proto3";
option go_package = "github.com/potix/ylcc/protocol";
option csharp_namespace = "ylccClient";

// The ylcc service definition.
service ylcc {
	// キャッシュされているvideo情報を返す
	rpc GetVideo (GetVideoRequest) returns (GetVideoResponse) {}
	// 配信中のライブチャットの収集を開始する
	// 収集したメッセージはキャッシュされる
	rpc StartCollectionActiveLiveChat (StartCollectionActiveLiveChatRequest) returns (StartCollectionActiveLiveChatResponse) {}
	// 収集中のライブチャットのメッセージをリアルタイムに返す
	rpc PollActiveLiveChat (PollActiveLiveChatRequest) returns (stream PollActiveLiveChatResponse) {}
	// 収集後キャッシュしたライブチャットのメッセージを返す
	// 収集中はエラーを返す
	rpc GetCachedActiveLiveChat (GetCachedActiveLiveChatRequest) returns (GetCachedActiveLiveChatResponse) {}
	// アーカイブのライブチャットの収集を開始する
	rpc StartCollectionArchiveLiveChat (StartCollectionArchiveLiveChatRequest) returns (StartCollectionArchiveLiveChatResponse) {}
	// アーカイブのライブチャットのメッセージを返す
	// 収集中はエラーを返す
	rpc GetArchiveLiveChat (GetArchiveLiveChatRequest) returns (GetArchiveLiveChatResponse) {}

	// 配信中のライブチャットのワードクラウドメッセージの収集を開始する
	rpc StartCollectionWordCloudMessages (StartCollectionWordCloudMessagesRequest) returns (StartCollectionWordCloudMessagesResponse) {}
	// 収集中のライブチャットメッセージからword cloudを生成して返す
	rpc GetWordCloud (GetWordCloudRequest) returns (GetWordCloudResponse) {}
}

enum Code {
	SUCCESS = 0;
	NOT_FOUND = 1;
	NOT_PERMITTED = 2;
	IN_PROGRESS = 3;
	INTERNAL_ERROR = 4;
}

enum Target {
	ALL_USER                = 0;
	OWNER_MODERATOR_SPONSOR = 1;
	OWNER_MODERATOR         = 2;
}

message Status {
	Code code = 1;
	string message = 2;
}

message GetVideoRequest {
	string videoId = 1;
}

message GetVideoResponse {
	Status status = 1;
        Video video = 2;
}

message StartCollectionActiveLiveChatRequest {
	string videoId = 1;
}

message StartCollectionActiveLiveChatResponse {
	Status status = 1;
	Video video = 2;
}

message PollActiveLiveChatRequest {
	string videoId = 1;
}

message PollActiveLiveChatResponse {
	Status status = 1;
	repeated ActiveLiveChatMessage activeLiveChatMessages = 2;
}

message GetCachedActiveLiveChatRequest {
	string videoId = 1;
	int64 offset = 2;
	int64 count = 3;
}

message GetCachedActiveLiveChatResponse {
	Status status = 1;
	repeated ActiveLiveChatMessage activeLiveChatMessages = 3;
}

message StartCollectionArchiveLiveChatRequest {
	string videoId = 1;
	bool replace = 2;
}

message StartCollectionArchiveLiveChatResponse {
	Status status = 1;
	Video video = 2;
}

message GetArchiveLiveChatRequest {
	string videoId = 1;
	int64 offset = 2;
	int64 count = 3;
}

message GetArchiveLiveChatResponse {
	Status status = 1;
	repeated ArchiveLiveChatMessage ArchiveLiveChatMessages = 3;
}

message Video {
	string videoId = 1;
	string channelId = 2;
	string categoryId = 3; 
	string title = 4;  
	string description = 5;
	string publishedAt = 6;
	string duration = 7;
	string activeLiveChatId = 8;
        string actualStartTime = 9;
        string actualEndTime = 10;
        string scheduledStartTime = 11;
        string scheduledEndTime = 12; 
        string privacyStatus = 13;
	string uploadStatus = 14;
	bool embeddable = 15;
}

message ActiveLiveChatMessage {
	string messageId = 1;
        string channelId = 2;
        string videoId = 3;
	string apiEtag = 4;
	string authorChannelId = 5;
	string authorChannelUrl = 6;
	string authorDisplayName = 7;
	bool authorIsChatModerator = 8;
	bool authorIsChatOwner = 9;
	bool authorIsChatSponsor = 10;
	bool authorIsVerified = 11;
	string liveChatId = 12;
	string displayMessage = 13;
	string publishedAt = 14;
	bool isSuperChat = 15;
	string amountDisplayString = 16;
	string currency = 17;
	string pageToken = 18;
}

message ArchiveLiveChatMessage {
        string messageId = 1;
        string channelId = 2;
        string videoId = 3;
        string clientId  = 4;
        string authorName = 5;
	string authorExternalChannelId = 6;
        string messageText = 7;
        string purchaseAmountText = 8;
	bool isPaid = 9;
        string timestampUsec = 10;
        string timestampText = 11;
        string videoOffsetTimeMsec = 12;
	string continuation = 13;
}

message StartCollectionWordCloudMessagesRequest {
	string videoId = 1;
}

message StartCollectionWordCloudMessagesResponse {
	Status status = 1;
	Video video = 2;
}

message Color {
	uint32 r = 1; 
	uint32 g = 2;
	uint32 b = 3;
	uint32 a = 4;
}

message GetWordCloudRequest {
	string videoId = 1;
	Target target = 2;
	int32  width = 3;
	int32  height = 4;
	int32  fontMaxSize = 5;
	int32  fontMinSize = 6;
	repeated Color colors = 7;
	Color  backgroundColor = 8;
}

message GetWordCloudResponse {
	Status status = 1;
	string mimeType = 2;
	bytes  data = 3;
}

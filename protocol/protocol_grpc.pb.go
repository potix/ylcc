// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YlccClient is the client API for Ylcc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YlccClient interface {
	// Get video information
	GetVideoInfo(ctx context.Context, in *GetVideoInfoRequst, opts ...grpc.CallOption) (*GetVideoInfoResponse, error)
	// Start collect video
	StartCollectLiveChat(ctx context.Context, in *StartCollectLiveChatRequest, opts ...grpc.CallOption) (*StartCollectLiveChatResponse, error)
	// Delete live Chat
	DeleteLiveChat(ctx context.Context, in *DeleteLiveChatRequest, opts ...grpc.CallOption) (*DeleteLiveChatResponse, error)
	// Get recently active live chat of video
	GetRecentlyActiveLiveChat(ctx context.Context, in *GetRecentlyActiveLiveChatRequest, opts ...grpc.CallOption) (*GetRecentlyActiveLiveChatResponse, error)
	// Get live chat of video
	GetLiveChat(ctx context.Context, in *GetLiveChatRequest, opts ...grpc.CallOption) (Ylcc_GetLiveChatClient, error)
}

type ylccClient struct {
	cc grpc.ClientConnInterface
}

func NewYlccClient(cc grpc.ClientConnInterface) YlccClient {
	return &ylccClient{cc}
}

func (c *ylccClient) GetVideoInfo(ctx context.Context, in *GetVideoInfoRequst, opts ...grpc.CallOption) (*GetVideoInfoResponse, error) {
	out := new(GetVideoInfoResponse)
	err := c.cc.Invoke(ctx, "/ylcc/GetVideoInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ylccClient) StartCollectLiveChat(ctx context.Context, in *StartCollectLiveChatRequest, opts ...grpc.CallOption) (*StartCollectLiveChatResponse, error) {
	out := new(StartCollectLiveChatResponse)
	err := c.cc.Invoke(ctx, "/ylcc/StartCollectLiveChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ylccClient) DeleteLiveChat(ctx context.Context, in *DeleteLiveChatRequest, opts ...grpc.CallOption) (*DeleteLiveChatResponse, error) {
	out := new(DeleteLiveChatResponse)
	err := c.cc.Invoke(ctx, "/ylcc/DeleteLiveChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ylccClient) GetRecentlyActiveLiveChat(ctx context.Context, in *GetRecentlyActiveLiveChatRequest, opts ...grpc.CallOption) (*GetRecentlyActiveLiveChatResponse, error) {
	out := new(GetRecentlyActiveLiveChatResponse)
	err := c.cc.Invoke(ctx, "/ylcc/GetRecentlyActiveLiveChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ylccClient) GetLiveChat(ctx context.Context, in *GetLiveChatRequest, opts ...grpc.CallOption) (Ylcc_GetLiveChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ylcc_ServiceDesc.Streams[0], "/ylcc/GetLiveChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &ylccGetLiveChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ylcc_GetLiveChatClient interface {
	Recv() (*GetLiveChatResponse, error)
	grpc.ClientStream
}

type ylccGetLiveChatClient struct {
	grpc.ClientStream
}

func (x *ylccGetLiveChatClient) Recv() (*GetLiveChatResponse, error) {
	m := new(GetLiveChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// YlccServer is the server API for Ylcc service.
// All implementations must embed UnimplementedYlccServer
// for forward compatibility
type YlccServer interface {
	// Get video information
	GetVideoInfo(context.Context, *GetVideoInfoRequst) (*GetVideoInfoResponse, error)
	// Start collect video
	StartCollectLiveChat(context.Context, *StartCollectLiveChatRequest) (*StartCollectLiveChatResponse, error)
	// Delete live Chat
	DeleteLiveChat(context.Context, *DeleteLiveChatRequest) (*DeleteLiveChatResponse, error)
	// Get recently active live chat of video
	GetRecentlyActiveLiveChat(context.Context, *GetRecentlyActiveLiveChatRequest) (*GetRecentlyActiveLiveChatResponse, error)
	// Get live chat of video
	GetLiveChat(*GetLiveChatRequest, Ylcc_GetLiveChatServer) error
	mustEmbedUnimplementedYlccServer()
}

// UnimplementedYlccServer must be embedded to have forward compatible implementations.
type UnimplementedYlccServer struct {
}

func (UnimplementedYlccServer) GetVideoInfo(context.Context, *GetVideoInfoRequst) (*GetVideoInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoInfo not implemented")
}
func (UnimplementedYlccServer) StartCollectLiveChat(context.Context, *StartCollectLiveChatRequest) (*StartCollectLiveChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCollectLiveChat not implemented")
}
func (UnimplementedYlccServer) DeleteLiveChat(context.Context, *DeleteLiveChatRequest) (*DeleteLiveChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLiveChat not implemented")
}
func (UnimplementedYlccServer) GetRecentlyActiveLiveChat(context.Context, *GetRecentlyActiveLiveChatRequest) (*GetRecentlyActiveLiveChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentlyActiveLiveChat not implemented")
}
func (UnimplementedYlccServer) GetLiveChat(*GetLiveChatRequest, Ylcc_GetLiveChatServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLiveChat not implemented")
}
func (UnimplementedYlccServer) mustEmbedUnimplementedYlccServer() {}

// UnsafeYlccServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YlccServer will
// result in compilation errors.
type UnsafeYlccServer interface {
	mustEmbedUnimplementedYlccServer()
}

func RegisterYlccServer(s grpc.ServiceRegistrar, srv YlccServer) {
	s.RegisterService(&Ylcc_ServiceDesc, srv)
}

func _Ylcc_GetVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoInfoRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YlccServer).GetVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ylcc/GetVideoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YlccServer).GetVideoInfo(ctx, req.(*GetVideoInfoRequst))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ylcc_StartCollectLiveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCollectLiveChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YlccServer).StartCollectLiveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ylcc/StartCollectLiveChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YlccServer).StartCollectLiveChat(ctx, req.(*StartCollectLiveChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ylcc_DeleteLiveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLiveChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YlccServer).DeleteLiveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ylcc/DeleteLiveChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YlccServer).DeleteLiveChat(ctx, req.(*DeleteLiveChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ylcc_GetRecentlyActiveLiveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentlyActiveLiveChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YlccServer).GetRecentlyActiveLiveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ylcc/GetRecentlyActiveLiveChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YlccServer).GetRecentlyActiveLiveChat(ctx, req.(*GetRecentlyActiveLiveChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ylcc_GetLiveChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLiveChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YlccServer).GetLiveChat(m, &ylccGetLiveChatServer{stream})
}

type Ylcc_GetLiveChatServer interface {
	Send(*GetLiveChatResponse) error
	grpc.ServerStream
}

type ylccGetLiveChatServer struct {
	grpc.ServerStream
}

func (x *ylccGetLiveChatServer) Send(m *GetLiveChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Ylcc_ServiceDesc is the grpc.ServiceDesc for Ylcc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ylcc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ylcc",
	HandlerType: (*YlccServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVideoInfo",
			Handler:    _Ylcc_GetVideoInfo_Handler,
		},
		{
			MethodName: "StartCollectLiveChat",
			Handler:    _Ylcc_StartCollectLiveChat_Handler,
		},
		{
			MethodName: "DeleteLiveChat",
			Handler:    _Ylcc_DeleteLiveChat_Handler,
		},
		{
			MethodName: "GetRecentlyActiveLiveChat",
			Handler:    _Ylcc_GetRecentlyActiveLiveChat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLiveChat",
			Handler:       _Ylcc_GetLiveChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protocol.proto",
}
